AWSTemplateFormatVersion: '2010-09-09'
Description: 'AUTOMATED: tgbots Serverless Deployment Logic'
Transform: 'AWS::Serverless-2016-10-31'
Parameters:
  ServiceName:
    Type: String
    Description: 'Name of the service that will be used to tag each resource.'
  StackTag:
    Type: String
    Description: An environment tag for this stack. Used to differentiate what resource need or should be created.
Resources:
    DDBDataTable:
        Type: "AWS::DynamoDB::Table"
        Properties:
            AttributeDefinitions:
              - AttributeName: "update_id"
                AttributeType: "N"
            TableName: "DataTable"
            KeySchema:
              - AttributeName: "update_id"
                KeyType: "HASH"
            ProvisionedThroughput:
                ReadCapacityUnits: 5
                WriteCapacityUnits: 5
    DDBCallBackTable:
        Type: "AWS::DynamoDB::Table"
        Properties:
            AttributeDefinitions:
              - AttributeName: "update_id"
                AttributeType: "N"
            TableName: "CallbackTable"
            KeySchema:
              - AttributeName: "update_id"
                KeyType: "HASH"
            ProvisionedThroughput:
                ReadCapacityUnits: 5
                WriteCapacityUnits: 5
    IAMManagedPolicy:
        Type: 'AWS::IAM::ManagedPolicy'
        Properties:
            ManagedPolicyName: !Sub '${AWS::StackName}-LambdaEdgeExecutionRole'
            Path: '/service-role/'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:BatchGetItem
                    - dynamodb:GetItem
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:BatchWriteItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                  Resource:
                    - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DDBCallBackTable}'
                    - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DDBDataTable}'
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'arn:aws:logs:*:*:*'
                - Effect: Allow
                  Action:
                    - kms:Decrypt
                  Resource:
                    - !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/2cfefa65-a316-4706-a598-5e0b8cb057e9'
    LambdaIamRole:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: !Sub '${AWS::StackName}-LambdaIamRole'
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":[\"lambda.amazonaws.com\",\"edgelambda.amazonaws.com\"]},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns:
              - !Ref IAMManagedPolicy
    LambdaFunction:
        Type: 'AWS::Serverless::Function'
        Properties:
          CodeUri:
            Bucket: tgbots-514215195183-artifacts
            Key: pkg.zip
          Description: ""
          FunctionName: !Sub '${AWS::StackName}-LambdaFunction'
          Handler: handlers.fleet_morsel_bot_handler
          MemorySize: 1024
          Role: !GetAtt LambdaIamRole.Arn
          Runtime: python3.9
          Timeout: 900
          Environment:
              Variables:
                  EncryptedJson: '{{resolve:ssm:/tgbots/fleetmorsel/secrets}}'
          Tags:
            ServiceName: !Ref ServiceName
    ApiGatewayRestApi:
          Type: "AWS::ApiGateway::RestApi"
          Properties:
              Name: !Sub '${AWS::StackName}-ApiGatewayRestApi'
              ApiKeySourceType: "HEADER"
              Description: An API Gateway with a Lambda Integration
              EndpointConfiguration:
                  Types:
                    - "REGIONAL"
    ApiGatewayMethod:
        Type: "AWS::ApiGateway::Method"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            ResourceId: !GetAtt ApiGatewayRestApi.RootResourceId
            HttpMethod: "ANY"
            AuthorizationType: "NONE"
            ApiKeyRequired: false
            RequestParameters: {}
            MethodResponses:
              -
                ResponseModels:
                    "application/json": "Empty"
                StatusCode: "200"
            Integration:
                ContentHandling: "CONVERT_TO_TEXT"
                IntegrationHttpMethod: "POST"
                IntegrationResponses:
                  -
                    ResponseTemplates: {}
                    StatusCode: "200"
                PassthroughBehavior: "WHEN_NO_MATCH"
                TimeoutInMillis: 29000
                Type: "AWS_PROXY"
                Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaFunction}/invocations"
    ApiGatewayStage:
        Type: AWS::ApiGateway::Stage
        Properties:
          DeploymentId: !Ref ApiGatewayDeployment
          Description: !Sub 'Lambda API Stage v0 - ${AWS::StackName}'
          RestApiId: !Ref ApiGatewayRestApi
          StageName: 'v0'
    ApiGatewayDeployment:
        Type: AWS::ApiGateway::Deployment
        DependsOn: ApiGatewayMethod
        Properties:
          Description: !Sub 'Lambda API Deployment - ${AWS::StackName}'
          RestApiId: !Ref ApiGatewayRestApi
    LambdaPermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt LambdaFunction.Arn
            Principal: "apigateway.amazonaws.com"
            SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/*/"

Outputs:
  ApiGatewayEndpoint:
    Description: API Gateway endpoint that will be used to configure Telegram bot webhooks
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayStage}/"
  StackName:
    Description: Name of stack
    Value: AWS::StackName