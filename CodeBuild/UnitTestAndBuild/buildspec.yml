# https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html
# https://docs.aws.amazon.com/codebuild/latest/userguide/getting-started-cli-create-build-spec.html

version: 0.2

phases:
  install:
    runtime-versions:
      dotnet: 5.0
      python: 3.8
    commands:
      # Check PowerShell Version
      - pwsh -command '$PSVersionTable'

      # check python version
      - python --version

      # Check available variables in the build
      # - pwsh -command 'Get-Variable'

      # Check available environment variables in the build
      - pwsh -command 'Get-ChildItem env:'

      # Configure AWS defaults using the configuration script added to the Docker Image.
      - pwsh -command './CodeBuild/configure_aws_credential.ps1'

      # Installing PowerShell Modules from PSGallery
      - pwsh -command 'Set-Variable $ProgressPreference SilentlyContinue ; ./CodeBuild/UnitTestAndBuild/install_modules.ps1'

      # Install Python packages
      - pip install pip -U --quiet
      - pip install -r ./lambdafunctions/python/requirements.txt --quiet

  pre_build:
    commands:
      # Validate CloudFormation Templates
      - pwsh -command '
          Import-Module Pester;
          $pesterConfiguration = [PesterConfiguration]::new();
          $pesterConfiguration.Run.Exit = $true;
          $pesterConfiguration.Run.Path = "./CodeBuild/UnitTestAndBuild/Validate-CFNTemplates.Tests.ps1";
          $pesterConfiguration.Output.Verbosity = "Detailed";
          Invoke-Pester -Configuration $pesterConfiguration'

      # Validate Json files
      - pwsh -command '
          Import-Module Pester;
          $pesterConfiguration = [PesterConfiguration]::new();
          $pesterConfiguration.Run.Exit = $true;
          $pesterConfiguration.Run.Path = "./CodeBuild/UnitTestAndBuild/Validate-JSONConfigurations.Tests.ps1";
          $pesterConfiguration.Output.Verbosity = "Detailed";
          Invoke-Pester -Configuration $pesterConfiguration'
  build:
    commands:
      # Publish CloudFormation templates as required / update parameter files as required
      - pwsh -command '& ./CodeBuild/UnitTestAndBuild/Publish-CFNTemplatesToS3.ps1'

      # Running Invoke-Build against each PowerShell AWS Lambda Function
      - pwsh -command 'Get-ChildItem -Path './lambdafunctions/PowerShell' -Filter '*.build.ps1' -File -Recurse | ForEach-Object {Invoke-Build -File $_.FullName}'

      # # Run Python unit tests
      # - python -m pytest lambdafunctions/python/tests -v

      # Package the Python lambda
      - pwsh -command './CodeBuild/UnitTestAndBuild/Package-PythonServerless.ps1'

      # the method below uses the aws cli to package the control plan but this seems to be having S3 Url validation issues currently
      # using Publish-CFNTemplates instead
      - cd $CODEBUILD_SRC_DIR/cloudformation
      - aws cloudformation package --template-file controlplane.yml --s3-bucket $ARTIFACT_S3_BUCKET --output-template-file controlplane-packaged.yml


  post_build:
    commands:
      - echo THE POSTBUILD

artifacts:
  files:
    - cloudformation/**/*
    - CodeBuild/**/*